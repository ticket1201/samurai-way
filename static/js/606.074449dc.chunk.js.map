{"version":3,"file":"static/js/606.074449dc.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,MAAQ,uBAAuB,gBAAkB,iCAAiC,SAAW,0BAA0B,WAAa,8B,UCAvL,EAAuB,yBAAvB,EAAuD,yBAAvD,EAAyF,2B,SCS5EA,EAAa,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,KACxBC,EAAI,mBAAeF,GAKvB,OACI,iBAAKG,UAAWC,EAAhB,WACI,gBAAKC,IAAI,2CAA2CC,IAAI,YACxD,SAAC,KAAD,CAASC,GAAIL,EAAMC,UAPZ,WACX,OAAOH,EAAGQ,aAAeN,EAAKA,EAAKO,QAA5B,UAAyCL,EAAzC,YAAmDA,GAAnD,UAAmEA,IAMtE,SACKH,QCnBjB,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAuF,sBCO1ES,EAAU,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,KAC9B,OACI,iBAAKT,UAAWC,EAAhB,WACI,gBAAKC,IAAI,2CAA2CC,IAAI,YACxD,cAAGH,UAAWC,EAAd,SAAuBO,KACvB,cAAGR,UAAWC,EAAd,SAAuBQ,Q,uCCQnC,GAAeC,EAAAA,EAAAA,GAAiC,CAACC,KAAM,oBAAvD,EAVsB,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,aACpB,OACI,kBAAMZ,UAAWC,EAAAA,WAAcY,SAAUD,EAAzC,WACI,SAACE,EAAA,EAAD,CAAOd,UAAWC,EAAAA,SAAYc,UAAWC,EAAAA,EAAUlB,KAAK,iBACjDmB,YAAa,qBAAsBC,SAAU,CAACC,EAAAA,MACrD,2C,6BCgBZ,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAM,CACFC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAM,CACFC,cAAe,SAACC,GACZF,GAASG,EAAAA,EAAAA,IAAcD,SAO/BE,EAAAA,EAFJ,ECxBuB,SAAC,GAAoD,IAAnDL,EAAkD,EAAlDA,YAAaE,EAAqC,EAArCA,cAE5BI,EAAkBN,EAAYO,MAC/BC,KAAI,SAAAC,GAAM,OAAI,SAACpC,EAAD,CAAYE,KAAMkC,EAAOlC,KAAMD,GAAImC,EAAOnC,IAASmC,EAAOnC,OAEvEoC,EAAmBV,EAAYW,SAChCH,KAAI,SAAAvB,GAAO,OAAI,SAACD,EAAD,CAASC,QAASA,EAAQA,QAASC,KAAMD,EAAQC,MAAWD,EAAQX,OAOxF,OACI,iBAAKG,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,MAAhB,SACK4B,KAEL,iBAAK7B,UAAWC,EAAAA,gBAAhB,WACI,gBAAKD,UAAWC,EAAAA,SAAhB,SACKgC,KAEL,SAAC,EAAD,CAAepB,SAbN,SAAC,GAA6C,IAA5CsB,EAA2C,EAA3CA,eACnBV,EAAcU","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.scss?c926","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/AddDialogForm/AddDialogMessage.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__FrkAx\",\"items\":\"Dialogs_items__GBSOD\",\"messagesWrapper\":\"Dialogs_messagesWrapper__SsrJA\",\"messages\":\"Dialogs_messages__dCnGY\",\"newMessage\":\"Dialogs_newMessage__Ke+2X\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__JSKCj\",\"link\":\"DialogItem_link__E0bNR\",\"active\":\"DialogItem_active__vEI4U\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.scss';\r\n\r\ntype DialogPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\n\r\nexport const DialogItem = ({id, name}: DialogPropsType) => {\r\n    let path = `/dialogs/${id}`;\r\n    let isActive = () => {\r\n        return id.toString() === path[path.length] ? `${s.link} ${s.active}` : `${s.link}`;\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://html5css.ru/howto/img_avatar.png\" alt=\"Avatar\"/>\r\n            <NavLink to={path} className={isActive}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__ARd5I\",\"text\":\"Message_text__lTQ1F\",\"time\":\"Message_time__cq7NK\"};","import React from 'react';\r\nimport s from './Message.module.scss'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    time: string\r\n}\r\n\r\nexport const Message = ({message, time}:MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <img src=\"https://html5css.ru/howto/img_avatar.png\" alt=\"avatar\"/>\r\n            <p className={s.text}>{message}</p>\r\n            <p className={s.time}>{time}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.scss'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {TextArea} from '../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\n\r\nexport type AddDialogFormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\n\r\nconst AddDialogForm = ({handleSubmit}: InjectedFormProps<AddDialogFormDataType>) => {\r\n    return (\r\n        <form className={s.newMessage} onSubmit={handleSubmit}>\r\n            <Field className={s.textarea} component={TextArea} name=\"newMessageText\"\r\n                   placeholder={'Enter your message'} validate={[required]}/>\r\n            <button>Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm<AddDialogFormDataType>({form: 'dialogAddMessage'})(AddDialogForm);","import {\r\n    sendMessageTC\r\n} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppActionsType, AppStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {ComponentType} from 'react';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\ntype mapDispatchToPropsType = {\r\n    onSendMessage: (text:string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapDispatchToPropsType & mapStateToPropsType\r\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:ThunkDispatch<AppStateType, unknown, AppActionsType>):mapDispatchToPropsType => {\r\n    return{\r\n        onSendMessage: (text:string) => {\r\n            dispatch(sendMessageTC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport AddDialogForm, {AddDialogFormDataType} from './AddDialogForm/AddDialogMessage';\r\n\r\n\r\nexport const Dialogs = ({dialogsPage, onSendMessage}: DialogsPropsType) => {\r\n\r\n    const dialogsElements = dialogsPage.names\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>)\r\n\r\n    const messagesElements = dialogsPage.messages\r\n        .map(message => <Message message={message.message} time={message.time} key={message.id}/>)\r\n\r\n\r\n    const handleSubmit = ({newMessageText}: AddDialogFormDataType) => {\r\n        onSendMessage(newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messagesWrapper}>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddDialogForm onSubmit={handleSubmit}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n"],"names":["DialogItem","id","name","path","className","s","src","alt","to","toString","length","Message","message","time","reduxForm","form","handleSubmit","onSubmit","Field","component","TextArea","placeholder","validate","required","compose","connect","state","dialogsPage","dispatch","onSendMessage","text","sendMessageTC","withAuthRedirect","dialogsElements","names","map","dialog","messagesElements","messages","newMessageText"],"sourceRoot":""}