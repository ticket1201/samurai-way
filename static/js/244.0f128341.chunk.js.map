{"version":3,"file":"static/js/244.0f128341.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileInfoLoader/ProfileInfoLoader.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://samurai-way/./src/components/Profile/Contacts/Contacts.module.scss?e843","components/Profile/ProfileInfo/ProfileForm/ProfileForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Contacts/Contacts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Profile_main__UrkZJ\",\"plug\":\"Profile_plug__JZ39g\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__l-t83\",\"profileMain\":\"ProfileInfo_profileMain__um5HO\",\"imgWrapper\":\"ProfileInfo_imgWrapper__idokZ\",\"lookingForJob\":\"ProfileInfo_lookingForJob__fouO+\",\"image\":\"ProfileInfo_image__JQyfD\",\"profileMainDescription\":\"ProfileInfo_profileMainDescription__E1h8O\",\"profileMainDescriptionPlug\":\"ProfileInfo_profileMainDescriptionPlug__uoSYq\",\"blink\":\"ProfileInfo_blink__cViVH\",\"blink-2\":\"ProfileInfo_blink-2__noQC0\"};","import React from 'react';\r\nimport s from '../ProfileInfo.module.scss';\r\n\r\nconst ProfileInfoLoader = () => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <img\r\n                src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                alt=\"Landscape\"/>\r\n            <div className={`${s.profileMain} ${s.blink}`}>\r\n                <div className={s.image}></div>\r\n                <div className={s.profileMainDescriptionPlug}>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfoLoader;","import React, {ChangeEvent} from 'react';\r\n//import s from './../ProfileInfo.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype localStateType = {\r\n    editMode: boolean,\r\n    statusText: string\r\n}\r\n\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state:localStateType = {\r\n        editMode: false,\r\n        statusText: this.props.status\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.statusText)\r\n    }\r\n\r\n    updateStatusHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            statusText: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: localStateType) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                statusText: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode\r\n                    ? <div>\r\n                        <input type=\"text\" value={this.state.statusText} onBlur={this.deactivateEditMode} onChange={this.updateStatusHandler} autoFocus/>\r\n                    </div>\r\n                    : <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || 'nothing' }</span>\r\n                    </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__L7RPG\",\"contactsLinks\":\"Contacts_contactsLinks__bjsCJ\"};","import s from '../../Contacts/Contacts.module.scss';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfilePageType} from '../../../../redux/profile-reducer';\r\n\r\n\r\nconst ProfileForm = ({handleSubmit, error, ...rest}: InjectedFormProps<ProfilePageType>) => {\r\n    let inputs = rest.initialValues.contacts && Object.keys(rest.initialValues.contacts).map((key) => {\r\n        return <div key={key}>\r\n            <label>\r\n                <Field type=\"input\" component={'input'} name={'contacts.' + key} key={key}/>\r\n                {key}\r\n            </label>\r\n        </div>\r\n    })\r\n    return (\r\n        <div className={s.contactsLinks}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>\r\n                        {'fullName'}\r\n                        <Field type=\"input\" component={'input'} name={'fullName'} key={'fullName'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'aboutMe'}\r\n                        <Field type=\"input\" component={'input'} name={'aboutMe'} key={'aboutMe'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'lookingForAJob'}\r\n                        <Field type=\"checkbox\" component={'input'} name={'lookingForAJob'} key={'lookingForAJob'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'lookingForAJobDescription'}\r\n                        <Field type=\"input\" component={'input'} name={'lookingForAJobDescription'}\r\n                               key={'lookingForAJobDescription'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    Contacts:\r\n                    {inputs}\r\n                </div>\r\n                <button>Save\r\n                </button>\r\n                {error && <p className={s.error}>{error}</p>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfilePageType>({form: 'contacts'})(ProfileForm);","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport defaultAvatar from './../../../assets/images/default_avatar.png'\r\nimport s from './ProfileInfo.module.scss'\r\nimport {ProfilePageType} from '../../../redux/profile-reducer';\r\nimport ProfileInfoLoader from './ProfileInfoLoader/ProfileInfoLoader';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport ProfileForm from './ProfileForm/ProfileForm';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfilePageType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: ProfilePageType) => Promise<any>\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n\r\n    if (!profile) {\r\n        return (\r\n            <ProfileInfoLoader/>\r\n        )\r\n    }\r\n\r\n    const isLookingForJobStyle = profile?.lookingForAJob ? s.lookingForJob : '';\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfilePageType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <img\r\n                src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                alt=\"Landscape\"/>\r\n            <div className={s.profileMain}>\r\n                <div className={s.imgWrapper}>\r\n                    <img className={`${isLookingForJobStyle} ${s.image}`} src={profile.photos.small || defaultAvatar}\r\n                         alt=\"Avatar\"/>\r\n                    {isOwner && <button onClick={() => inRef && inRef.current && inRef.current.click()}>+</button>}\r\n                    {isOwner && <input type={'file'} ref={inRef} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                <div className={s.profileMainDescription}>\r\n                    {!editMode\r\n                        ? <>\r\n                            <h2>{profile.fullName}</h2>\r\n                            <p>Looking for a job: {profile.lookingForAJob || 'no'}</p>\r\n                            <p>{profile.aboutMe}</p>\r\n                            {profile?.lookingForAJob && <p>Ищу работу как: {profile?.lookingForAJobDescription}</p>}\r\n                            <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                            {isOwner && <button onClick={() => setEditMode(true)}>edit</button>}\r\n                        </>\r\n                        : <ProfileForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__mTzCh\",\"postsItemsWrapper\":\"MyPosts_postsItemsWrapper__rK-t4\",\"addPostWrapper\":\"MyPosts_addPostWrapper__057fB\",\"addPost\":\"MyPosts_addPost__LQ8Ms\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__nLf7j\",\"title\":\"Post_title__VZU73\",\"nameTimeWrapper\":\"Post_nameTimeWrapper__8a+vU\",\"name\":\"Post_name__Chsej\",\"message\":\"Post_message__WqRSK\",\"likes\":\"Post_likes__FUk7C\"};","import React from 'react'\r\nimport s from './Post.module.scss'\r\n\r\ntype PostType = {\r\n    name: string\r\n    time: string\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nexport const Post: React.FC<PostType> = ({name, time, message, likeCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.title}>\r\n                <img src=\"https://html5css.ru/howto/img_avatar.png\" alt=\"Profile\"/>\r\n                <div className={s.nameTimeWrapper}>\r\n                    <p className={s.name}>{name}</p>\r\n                    <p className={s.time}>{time}</p>\r\n                </div>\r\n            </div>\r\n            <div className={s.message}>\r\n                <p>{message}</p>\r\n            </div>\r\n            <div className={s.likes}>\r\n                <span>Likes: {likeCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from '../MyPosts.module.scss';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\n\r\nconst AddPostForm = ({handleSubmit}: InjectedFormProps<AddPostFormDataType>) => {\r\n\r\n    return (\r\n        <form className={s.addPost} onSubmit={handleSubmit}>\r\n            <Field component={TextArea} name=\"newPostText\" placeholder={'Enter your post text'} validate={[required, maxLength30]}/>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm<AddPostFormDataType>({form: 'postAddMessage'})(AddPostForm);","import React from 'react';\r\nimport s from './MyPosts.module.scss'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport AddPostForm, {AddPostFormDataType} from './AddPostForm/AddPostForm';\r\n\r\n\r\nexport class MyPosts extends React.PureComponent<MyPostsPropsType> {\r\n    render() {\r\n\r\n        const postsElements = this.props.posts\r\n            .map(post => <Post name={post.name} time={post.time} message={post.message} likeCount={post.likeCount} key={post.id}/>)\r\n\r\n        const handleSubmit = ({newPostText}: AddPostFormDataType) => {\r\n            this.props.addPost(newPostText)\r\n        }\r\n\r\n        return (\r\n            <div className={s.posts}>\r\n                <div className={s.addPostWrapper}>\r\n                    <h3>My posts</h3>\r\n                    <AddPostForm onSubmit={handleSubmit}/>\r\n                </div>\r\n                <div className={s.postsItemsWrapper}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import {\r\n    addPostTC,\r\n    PostsType,\r\n} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppActionsType, AppStateType} from '../../../redux/redux-store';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    posts: PostsType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppStateType, unknown, AppActionsType>): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPostTC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Contacts.module.scss';\r\nimport {ProfilePageType} from '../../../redux/profile-reducer';\r\n\r\ntype ContactsPropsType = {\r\n    profile: ProfilePageType\r\n}\r\n\r\n\r\nconst Contacts = ({profile}: ContactsPropsType) => {\r\n\r\n    let links = Object.keys({...profile.contacts}).map(key => {\r\n        return profile.contacts[key] && <div key={key}><p>{key}: <a href={profile.contacts[key]} target={'_blank'} rel=\"noreferrer\">{key}</a></p> </div>\r\n    })\r\n    if(links.every((el) => el === null)){\r\n        links = [<p key={'1'}>User has no contacts</p>]\r\n    }\r\n    return (\r\n        <div className={s.contacts}>\r\n            <h3>Contacts</h3>\r\n            <div className={s.contactsLinks}>\r\n                {links}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport styles from './Profile.module.scss'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePageType} from '../../redux/profile-reducer';\r\nimport Contacts from './Contacts/Contacts';\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfilePageType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: ProfilePageType) => Promise<any>\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfilePropsType) => {\r\n    return (\r\n        <>\r\n            {\r\n                (Object.keys(profile).length !== 0) && (\r\n                    <div className={styles.main}>\r\n                        <ProfileInfo isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}\r\n                                     savePhoto={savePhoto}\r\n                                     saveProfile={saveProfile}\r\n                        />\r\n                        <Contacts profile={profile}/>\r\n                        <MyPostsContainer/>\r\n                    </div>\r\n                )}\r\n        </>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePageType,\r\n    savePhoto, saveProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype ProfileContainerPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: any) => Promise<any>\r\n} & mapStateToPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfilePageType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerWithRoutePropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerWithRoutePropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId ?? this.props.authorizedUserId\r\n        if (!userId) {\r\n            this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerWithRoutePropsType>, prevState: Readonly<mapStateToPropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus, savePhoto, saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect)(ProfileContainer)"],"names":["className","s","src","alt","ProfileStatus","state","editMode","statusText","props","status","activateEditMode","setState","deactivateEditMode","updateStatus","updateStatusHandler","e","currentTarget","value","prevProps","prevState","this","type","onBlur","onChange","autoFocus","onDoubleClick","React","reduxForm","form","handleSubmit","error","rest","inputs","initialValues","contacts","Object","keys","map","key","Field","component","name","onSubmit","ProfileInfo","profile","isOwner","savePhoto","saveProfile","useState","setEditMode","inRef","useRef","isLookingForJobStyle","lookingForAJob","photos","small","defaultAvatar","onClick","current","click","ref","target","files","length","formData","then","fullName","aboutMe","lookingForAJobDescription","Post","time","message","likeCount","maxLength30","maxLengthCreator","TextArea","placeholder","validate","required","MyPosts","postsElements","posts","post","id","newPostText","addPost","MyPostsContainer","connect","profilePage","dispatch","text","addPostTC","links","href","rel","every","el","Profile","styles","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","compose","auth","withRouter","withAuthRedirect"],"sourceRoot":""}