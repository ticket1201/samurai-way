{"version":3,"file":"static/js/244.84386ca3.chunk.js","mappings":"iQASIA,EAAkB,SAACC,GAAD,MAA4C,CAC9DC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAqBC,GAA6B,IACxDC,EADuD,0IAEzD,WACI,MAA6BC,KAAKC,MAA7BN,EAAL,EAAKA,OAAWO,GAAhB,YACA,OAAKP,GACE,SAACG,GAAD,UAAeI,KADF,SAAC,KAAD,CAAUC,GAAI,eAJmB,GAC7BC,EAAAA,WAQhC,OAAOC,EAAAA,EAAAA,IAAQZ,EAARY,CAAyBN,K,uHCrBpC,EAAuB,sB,mBCAvB,EAA8B,iCAA9B,EAA6E,iCAA7E,EAA8H,mCAA9H,EAAyK,2BAAzK,EAA6N,4CAA7N,EAAsS,gDAAtS,EAA8V,2B,SCoB9V,EAlB0B,WACtB,OACI,iBAAKO,UAAWC,EAAhB,WACI,gBACIC,IAAI,oJACJC,IAAI,eACR,iBAAKH,UAAS,UAAKC,EAAL,YAAsBA,GAApC,WACI,gBAAKD,UAAWC,KAChB,iBAAKD,UAAWC,EAAhB,WACI,oBACA,6BCCdG,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAuBD,OAvBCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFhB,MAAuB,CACnBiB,UAAU,EACVC,WAAY,EAAKX,MAAMY,QAFJ,EAKvBC,iBAAmB,WACf,EAAKC,SAAS,CACVJ,UAAU,KAEjB,EAEDK,mBAAqB,WACjB,EAAKD,SAAS,CACVJ,UAAU,IAEd,EAAKV,MAAMgB,aAAa,EAAKvB,MAAMkB,aACtC,EAEDM,oBAAsB,SAACC,GACnB,EAAKJ,SAAS,CACVH,WAAYO,EAAEC,cAAcC,SAEnC,EAuBA,OAvBA,0CAED,SAAmBC,EAAmCC,GAC/CD,EAAUT,SAAWb,KAAKC,MAAMY,QAC/Bb,KAAKe,SAAS,CACVH,WAAYZ,KAAKC,MAAMY,WAGlC,oBAGD,WACI,OACI,8BACKb,KAAKN,MAAMiB,UACN,0BACE,kBAAOa,KAAK,OAAOH,MAAOrB,KAAKN,MAAMkB,WAAYa,OAAQzB,KAAKgB,mBAAoBU,SAAU1B,KAAKkB,oBAAqBS,WAAS,OAEjI,0BACE,iBAAMC,cAAe5B,KAAKc,iBAA1B,SAA6Cd,KAAKC,MAAMY,QAAU,oBAIrF,EA9CCH,CAAsBN,EAAAA,WAiD5B,I,UC9DA,GAAgB,SAAW,2BAA2B,cAAgB,iC,8CCsDtE,GAAeyB,EAAAA,EAAAA,GAA2B,CAACC,KAAM,YAAjD,EAjDoB,SAAC,GAAwE,IAAvEC,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,MAAUC,GAA8C,YACpFC,EAASD,EAAKE,cAAcC,UAAYC,OAAOC,KAAKL,EAAKE,cAAcC,UAAUG,KAAI,SAACC,GACtF,OAAO,0BACH,8BACI,SAACC,EAAA,EAAD,CAAOjB,KAAK,QAAQkB,UAAW,QAASC,KAAM,YAAcH,GAAUA,GACrEA,MAHQA,MAOrB,OACI,gBAAKlC,UAAWC,EAAAA,cAAhB,UACI,kBAAMqC,SAAUb,EAAhB,WACI,0BACI,6BACK,YACD,SAACU,EAAA,EAAD,CAAOjB,KAAK,QAAQkB,UAAW,QAASC,KAAM,YAAiB,kBAGvE,0BACI,6BACK,WACD,SAACF,EAAA,EAAD,CAAOjB,KAAK,QAAQkB,UAAW,QAASC,KAAM,WAAgB,iBAGtE,0BACI,6BACK,kBACD,SAACF,EAAA,EAAD,CAAOjB,KAAK,WAAWkB,UAAW,QAASC,KAAM,kBAAuB,wBAGhF,0BACI,6BACK,6BACD,SAACF,EAAA,EAAD,CAAOjB,KAAK,QAAQkB,UAAW,QAASC,KAAM,6BAClC,mCAGpB,uCAEKT,MAEL,qCAECF,IAAS,cAAG1B,UAAWC,EAAAA,MAAd,SAAwByB,YC/BrCa,EAAc,SAAC,GAAuF,IAAtFC,EAAqF,EAArFA,QAASjC,EAA4E,EAA5EA,OAAQI,EAAoE,EAApEA,aAAc8B,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,YAC5E,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKvC,EAAL,KAAewC,EAAf,KAEA,IAAKL,EACD,OACI,SAAC,EAAD,IAIR,IAAMM,EAA8B,OAAPN,QAAO,IAAPA,GAAAA,EAASO,eAAiB9C,EAAkB,GAYzE,OACI,iBAAKD,UAAWC,EAAhB,WACI,gBACIC,IAAI,oJACJC,IAAI,eACR,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAS,UAAK8C,EAAL,YAA6B7C,GAAWC,IAAKsC,EAAQQ,OAAOC,OAASC,EAC9E/C,IAAI,WACRsC,IAAW,kBAAOvB,KAAM,OAAQE,SAnBjB,SAACP,GACrBA,EAAEsC,OAAOC,OAASvC,EAAEsC,OAAOC,MAAMC,QACjCX,EAAU7B,EAAEsC,OAAOC,MAAM,QAkBrB,gBAAKpD,UAAWC,EAAhB,SACMI,GASI,SAAC,EAAD,CAAawB,cAAeW,EAASF,SAzB1C,SAACgB,GACdX,EAAYW,GAAUC,MAAK,WACvBV,GAAY,UAeE,iCACE,wBAAKL,EAAQgB,YACb,+CAAuBhB,EAAQO,gBAAkB,SACjD,uBAAIP,EAAQiB,WACJ,OAAPjB,QAAO,IAAPA,OAAA,EAAAA,EAASO,kBAAkB,+GAAoBP,QAApB,IAAoBA,OAApB,EAAoBA,EAASkB,8BACzD,SAAC,EAAD,CAAenD,OAAQA,EAAQI,aAAcA,IAC5C8B,IAAW,mBAAQkB,QAAS,kBAAMd,GAAY,IAAnC,8B,QCvDxC,EAAwB,uBAAxB,EAAyD,yBCAzD,EAAuB,mBAAvB,EAAoD,sBAApD,EAAkF,oBCQrEe,EAA2B,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC/C,OACI,iBAAK9D,UAAW+D,EAAhB,WACI,gBAAK7D,IAAI,2CAA2CC,IAAI,aACxD,gBAAKH,UAAW+D,EAAhB,UACI,uBAAIF,OAER,gBAAK7D,UAAW+D,EAAhB,UACI,sCAAcD,W,oBCPxBE,GAAcC,EAAAA,EAAAA,GAAiB,IAarC,GAAe1C,EAAAA,EAAAA,GAA+B,CAACC,KAAM,kBAArD,EAVoB,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,aAElB,OACI,kBAAMzB,UAAWC,EAAWqC,SAAUb,EAAtC,WACI,SAACU,EAAA,EAAD,CAAOC,UAAW8B,EAAAA,EAAU7B,KAAK,cAAc8B,YAAa,uBAAwBC,SAAU,CAACC,EAAAA,EAAUL,MACzG,6CCXCM,EAAb,0IACI,WAAU,IAAD,OAECC,EAAgB7E,KAAKC,MAAM6E,MAC5BvC,KAAI,SAAAwC,GAAI,OAAI,SAACb,EAAD,CAAMC,QAASY,EAAKZ,QAASC,UAAWW,EAAKX,WAAgBW,EAAKC,OAMnF,OACI,iBAAK1E,UAAWC,EAAhB,WACI,sCACA,SAAC,EAAD,CAAaqC,SAPA,SAAC,GAAwC,IAAvCqC,EAAsC,EAAtCA,YACnB,EAAKhF,MAAMiF,QAAQD,OAOf,gBAAK3E,UAAW,QAAhB,SACKuE,WAfrB,GAA6BzE,EAAAA,e,SC2BhB+E,GAAmB9E,EAAAA,EAAAA,KAdR,SAACX,GACrB,MAAO,CACHoF,MAAOpF,EAAM0F,YAAYN,UAIN,SAACO,GACxB,MAAO,CACHH,QAAS,SAACI,GACND,GAASE,EAAAA,EAAAA,IAAqBD,QAKVjF,CAA6CuE,G,UCP7E,EAlBiB,SAAC,GAAkC,IAAjC9B,EAAgC,EAAhCA,QAEX0C,EAAQnD,OAAOC,MAAP,UAAgBQ,EAAQV,WAAWG,KAAI,SAAAC,GAC/C,OAAOM,EAAQV,SAASI,KAAQ,4BAAe,yBAAIA,EAAJ,MAAU,cAAGiD,KAAM3C,EAAQV,SAASI,GAAMiB,OAAQ,SAAUiC,IAAI,aAAtD,SAAoElD,OAA7F,MAAUA,MAK9C,OAHGgD,EAAMG,OAAM,SAACC,GAAD,OAAe,OAAPA,OACnBJ,EAAQ,EAAC,mDAGT,iBAAKlF,UAAWC,EAAAA,SAAhB,WACI,uCACA,gBAAKD,UAAWC,EAAAA,cAAhB,SACKiF,QCJJK,EAAU,SAAC,GAAwF,IAAvF/C,EAAsF,EAAtFA,QAASjC,EAA6E,EAA7EA,OAAQI,EAAqE,EAArEA,aAAc8B,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,YACxE,OACI,8BAEyC,IAAhCZ,OAAOC,KAAKQ,GAASa,SAClB,iBAAKrD,UAAW+D,EAAhB,WACI,SAACxB,EAAD,CAAaE,QAASA,EAASD,QAASA,EAASjC,OAAQA,EAAQI,aAAcA,EAClE+B,UAAWA,EACXC,YAAaA,KAE1B,SAAC,EAAD,CAAUH,QAASA,KACnB,SAACqC,EAAD,U,8BCOlBW,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA4BD,OA5BCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACF,WAAkB,IAAD,EACTC,EAAM,UAAG/F,KAAKC,MAAM+F,MAAMC,OAAOF,cAA3B,QAAqC/F,KAAKC,MAAMiG,iBACrDH,GACD/F,KAAKC,MAAMkG,QAAQC,KAAK,UAE5BpG,KAAKC,MAAMoG,eAAeN,GAC1B/F,KAAKC,MAAMqG,UAAUP,KACxB,+BAED,WACI/F,KAAKuG,mBACR,gCAED,SAAmBjF,EAAyDC,GACpEvB,KAAKC,MAAM+F,MAAMC,OAAOF,SAAWzE,EAAU0E,MAAMC,OAAOF,QAC1D/F,KAAKuG,mBAEZ,oBAED,WACI,OACI,SAACV,EAAD,CAAS/C,QAAS9C,KAAKC,MAAM6C,QAASjC,OAAQb,KAAKC,MAAMY,OAChDI,aAAcjB,KAAKC,MAAMgB,aACzB8B,SAAU/C,KAAKC,MAAM+F,MAAMC,OAAOF,OAAQ/C,UAAWhD,KAAKC,MAAM+C,UAChEC,YAAajD,KAAKC,MAAMgD,kBAGxC,EA5BC6C,CAAyB1F,EAAAA,WAqC/B,GAAeoG,EAAAA,EAAAA,KACXnG,EAAAA,EAAAA,KAPoB,SAACX,GAAD,MAA+C,CACnEoD,QAASpD,EAAM0F,YAAYtC,QAC3BjC,OAAQnB,EAAM0F,YAAYvE,OAC1BqF,iBAAkBxG,EAAME,KAAKoF,MAIJ,CACrBqB,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAWrF,aAAAA,EAAAA,GAAc+B,UAAAA,EAAAA,GAAWC,YAAAA,EAAAA,KAExDwD,EAAAA,GACA5G,EAAAA,EALJ,CAKsBiG","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.scss?4008","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileInfoLoader/ProfileInfoLoader.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","webpack://samurai-way/./src/components/Profile/Contacts/Contacts.module.scss?e843","components/Profile/ProfileInfo/ProfileForm/ProfileForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Contacts/Contacts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType):MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n    class RedirectComponent extends React.Component<MapStatePropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Profile_main__UrkZJ\",\"plug\":\"Profile_plug__JZ39g\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__l-t83\",\"profileMain\":\"ProfileInfo_profileMain__um5HO\",\"lookingForJob\":\"ProfileInfo_lookingForJob__fouO+\",\"image\":\"ProfileInfo_image__JQyfD\",\"profileMainDescription\":\"ProfileInfo_profileMainDescription__E1h8O\",\"profileMainDescriptionPlug\":\"ProfileInfo_profileMainDescriptionPlug__uoSYq\",\"blink\":\"ProfileInfo_blink__cViVH\",\"blink-2\":\"ProfileInfo_blink-2__noQC0\"};","import React from 'react';\r\nimport s from '../ProfileInfo.module.scss';\r\n\r\nconst ProfileInfoLoader = () => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <img\r\n                src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                alt=\"Landscape\"/>\r\n            <div className={`${s.profileMain} ${s.blink}`}>\r\n                <div className={s.image}></div>\r\n                <div className={s.profileMainDescriptionPlug}>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfoLoader;","import React, {ChangeEvent} from 'react';\r\n//import s from './../ProfileInfo.module.scss'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype localStateType = {\r\n    editMode: boolean,\r\n    statusText: string\r\n}\r\n\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state:localStateType = {\r\n        editMode: false,\r\n        statusText: this.props.status\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.statusText)\r\n    }\r\n\r\n    updateStatusHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            statusText: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: localStateType) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                statusText: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode\r\n                    ? <div>\r\n                        <input type=\"text\" value={this.state.statusText} onBlur={this.deactivateEditMode} onChange={this.updateStatusHandler} autoFocus/>\r\n                    </div>\r\n                    : <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || 'nothing' }</span>\r\n                    </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__L7RPG\",\"contactsLinks\":\"Contacts_contactsLinks__bjsCJ\"};","import s from '../../Contacts/Contacts.module.scss';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ProfilePageType} from '../../../../redux/profile-reducer';\r\n\r\n\r\nconst ProfileForm = ({handleSubmit, error, ...rest}: InjectedFormProps<ProfilePageType>) => {\r\n    let inputs = rest.initialValues.contacts && Object.keys(rest.initialValues.contacts).map((key) => {\r\n        return <div key={key}>\r\n            <label>\r\n                <Field type=\"input\" component={'input'} name={'contacts.' + key} key={key}/>\r\n                {key}\r\n            </label>\r\n        </div>\r\n    })\r\n    return (\r\n        <div className={s.contactsLinks}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>\r\n                        {'fullName'}\r\n                        <Field type=\"input\" component={'input'} name={'fullName'} key={'fullName'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'aboutMe'}\r\n                        <Field type=\"input\" component={'input'} name={'aboutMe'} key={'aboutMe'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'lookingForAJob'}\r\n                        <Field type=\"checkbox\" component={'input'} name={'lookingForAJob'} key={'lookingForAJob'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        {'lookingForAJobDescription'}\r\n                        <Field type=\"input\" component={'input'} name={'lookingForAJobDescription'}\r\n                               key={'lookingForAJobDescription'}/>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    Contacts:\r\n                    {inputs}\r\n                </div>\r\n                <button>Save\r\n                </button>\r\n                {error && <p className={s.error}>{error}</p>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfilePageType>({form: 'contacts'})(ProfileForm);","import React, {ChangeEvent, useState} from 'react';\r\nimport defaultAvatar from './../../../assets/images/default_avatar.png'\r\nimport s from './ProfileInfo.module.scss'\r\nimport {ProfilePageType} from '../../../redux/profile-reducer';\r\nimport ProfileInfoLoader from './ProfileInfoLoader/ProfileInfoLoader';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport ProfileForm from './ProfileForm/ProfileForm';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfilePageType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: ProfilePageType) => Promise<any>\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return (\r\n            <ProfileInfoLoader/>\r\n        )\r\n    }\r\n\r\n    const isLookingForJobStyle = profile?.lookingForAJob ? s.lookingForJob : '';\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfilePageType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <img\r\n                src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                alt=\"Landscape\"/>\r\n            <div className={s.profileMain}>\r\n                <img className={`${isLookingForJobStyle} ${s.image}`} src={profile.photos.small || defaultAvatar}\r\n                     alt=\"Avatar\"/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <div className={s.profileMainDescription}>\r\n                    {!editMode\r\n                        ? <>\r\n                            <h2>{profile.fullName}</h2>\r\n                            <p>Looking for a job: {profile.lookingForAJob || 'no'}</p>\r\n                            <p>{profile.aboutMe}</p>\r\n                            {profile?.lookingForAJob && <p>Ищу работу как: {profile?.lookingForAJobDescription}</p>}\r\n                            <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                            {isOwner && <button onClick={() => setEditMode(true)}>edit</button>}\r\n                        </>\r\n                        : <ProfileForm initialValues={profile} onSubmit={onSubmit}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__mTzCh\",\"addPost\":\"MyPosts_addPost__LQ8Ms\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__nLf7j\",\"message\":\"Post_message__WqRSK\",\"likes\":\"Post_likes__FUk7C\"};","import React from 'react'\r\nimport styles from './Post.module.scss'\r\n\r\ntype PostType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\n\r\nexport const Post: React.FC<PostType> = ({message, likeCount} ) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img src=\"https://html5css.ru/howto/img_avatar.png\" alt=\"Profile\"/>\r\n            <div className={styles.message}>\r\n                <p>{message}</p>\r\n            </div>\r\n            <div className={styles.likes}>\r\n                <span>Likes: {likeCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from '../MyPosts.module.scss';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\nexport type AddPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\n\r\nconst AddPostForm = ({handleSubmit}: InjectedFormProps<AddPostFormDataType>) => {\r\n\r\n    return (\r\n        <form className={s.addPost} onSubmit={handleSubmit}>\r\n            <Field component={TextArea} name=\"newPostText\" placeholder={'Enter your post text'} validate={[required, maxLength30]}/>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm<AddPostFormDataType>({form: 'postAddMessage'})(AddPostForm);","import React from 'react';\r\nimport s from './MyPosts.module.scss'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport AddPostForm, {AddPostFormDataType} from './AddPostForm/AddPostForm';\r\n\r\n\r\nexport class MyPosts extends React.PureComponent<MyPostsPropsType> {\r\n    render() {\r\n\r\n        const postsElements = this.props.posts\r\n            .map(post => <Post message={post.message} likeCount={post.likeCount} key={post.id}/>)\r\n\r\n        const handleSubmit = ({newPostText}: AddPostFormDataType) => {\r\n            this.props.addPost(newPostText)\r\n        }\r\n\r\n        return (\r\n            <div className={s.posts}>\r\n                <h3>My posts</h3>\r\n                <AddPostForm onSubmit={handleSubmit}/>\r\n                <div className={'posts'}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import {\r\n    addPostActionCreator,\r\n    PostsType,\r\n} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    posts: PostsType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPostActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport s from './Contacts.module.scss';\r\nimport {ProfilePageType} from '../../../redux/profile-reducer';\r\n\r\ntype ContactsPropsType = {\r\n    profile: ProfilePageType\r\n}\r\n\r\n\r\nconst Contacts = ({profile}: ContactsPropsType) => {\r\n\r\n    let links = Object.keys({...profile.contacts}).map(key => {\r\n        return profile.contacts[key] && <div key={key}><p>{key}: <a href={profile.contacts[key]} target={'_blank'} rel=\"noreferrer\">{key}</a></p> </div>\r\n    })\r\n    if(links.every((el) => el === null)){\r\n        links = [<p>User has no contacts</p>]\r\n    }\r\n    return (\r\n        <div className={s.contacts}>\r\n            <h3>Contacts:</h3>\r\n            <div className={s.contactsLinks}>\r\n                {links}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport styles from './Profile.module.scss'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePageType} from '../../redux/profile-reducer';\r\nimport Contacts from './Contacts/Contacts';\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfilePageType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: ProfilePageType) => Promise<any>\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfilePropsType) => {\r\n    return (\r\n        <>\r\n            {\r\n                (Object.keys(profile).length !== 0) && (\r\n                    <div className={styles.main}>\r\n                        <ProfileInfo isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}\r\n                                     savePhoto={savePhoto}\r\n                                     saveProfile={saveProfile}\r\n                        />\r\n                        <Contacts profile={profile}/>\r\n                        <MyPostsContainer/>\r\n                    </div>\r\n                )}\r\n        </>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePageType,\r\n    savePhoto, saveProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype ProfileContainerPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: any) => Promise<any>\r\n} & mapStateToPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfilePageType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerWithRoutePropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerWithRoutePropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId ?? this.props.authorizedUserId\r\n        if (!userId) {\r\n            this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerWithRoutePropsType>, prevState: Readonly<mapStateToPropsType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile, getStatus, updateStatus, savePhoto, saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect)(ProfileContainer)"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","className","s","src","alt","ProfileStatus","editMode","statusText","status","activateEditMode","setState","deactivateEditMode","updateStatus","updateStatusHandler","e","currentTarget","value","prevProps","prevState","type","onBlur","onChange","autoFocus","onDoubleClick","reduxForm","form","handleSubmit","error","rest","inputs","initialValues","contacts","Object","keys","map","key","Field","component","name","onSubmit","ProfileInfo","profile","isOwner","savePhoto","saveProfile","useState","setEditMode","isLookingForJobStyle","lookingForAJob","photos","small","defaultAvatar","target","files","length","formData","then","fullName","aboutMe","lookingForAJobDescription","onClick","Post","message","likeCount","styles","maxLength30","maxLengthCreator","TextArea","placeholder","validate","required","MyPosts","postsElements","posts","post","id","newPostText","addPost","MyPostsContainer","profilePage","dispatch","text","addPostActionCreator","links","href","rel","every","el","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","compose","withRouter"],"sourceRoot":""}